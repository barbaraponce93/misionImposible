
package misionImposible.Vistas;


import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import misionImposible.AccesoADatos.AlumnoData;
import misionImposible.AccesoADatos.InscripcionData;
import misionImposible.entidades.Alumno;
import misionImposible.entidades.Inscripcion;



public class cargaDeNotas extends javax.swing.JInternalFrame {
private DefaultTableModel modelo = new DefaultTableModel();
public List<Alumno> alumno = new ArrayList<>();
public List<Inscripcion> insc = new ArrayList<>();
   
public  cargaDeNotas() {
    
        initComponents();
        llenarCB();
        armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbAlumno = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaCargaNotas = new javax.swing.JTable();
        jbotonGuardar = new javax.swing.JButton();
        jbotonSalir = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Carga de Notas");

        jLabel2.setText("Seleccione un Alumno : ");

        jcbAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnoActionPerformed(evt);
            }
        });

        jTablaCargaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Nota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablaCargaNotas);
        if (jTablaCargaNotas.getColumnModel().getColumnCount() > 0) {
            jTablaCargaNotas.getColumnModel().getColumn(0).setResizable(false);
            jTablaCargaNotas.getColumnModel().getColumn(1).setResizable(false);
        }

        jbotonGuardar.setText("Guardar");

        jbotonSalir.setText("Salir");
        jbotonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbotonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbotonGuardar)
                .addGap(70, 70, 70)
                .addComponent(jbotonSalir)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel1)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbotonGuardar)
                    .addComponent(jbotonSalir))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbotonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbotonSalirActionPerformed
        
        dispose();
    }//GEN-LAST:event_jbotonSalirActionPerformed

    private void jcbAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnoActionPerformed
       
        InscripcionData inscripcion = new InscripcionData();
        String seleccion = (String)jcbAlumno.getSelectedItem();
        String [] aux = seleccion.split(", ");
        int id =0;
        
        if (!seleccion.equals("  -- Seleccionar Item -- ")){
        // encontrar el id del alumno
           for (Alumno alu:this.alumno){
               
               if (aux[0].equals(alu.getDni()+"")){
                   id = alu.getIdAlumno();
               }
            }
        // obtener la lista de materias a las que esta inscripto el alumno
            insc = null;
            insc = inscripcion.obtenerInscripcionesPorAlumno(id);
            
        // mostrarlas en la tabla donde el codigo es el id de la materia    
            for (Inscripcion i: insc){
            
                modelo.addRow(new Object[]{i.getIdInscripto(),i.getMateria().getNombre(),i.getNota()});
            }
        }
    }//GEN-LAST:event_jcbAlumnoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablaCargaNotas;
    private javax.swing.JButton jbotonGuardar;
    private javax.swing.JButton jbotonSalir;
    private javax.swing.JComboBox<String> jcbAlumno;
    // End of variables declaration//GEN-END:variables
//------------------------------------------------------------------------------
    private void armarCabecera() {

        modelo.addColumn("CÃ³digo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        jTablaCargaNotas.setModel(modelo);
    }
//------------------------------------------------------------------------------
    private void llenarCB() {
        //Cargar el combo box con los items
        AlumnoData a = new AlumnoData();
        alumno = null;
        
        alumno = a.listarAlumnos();
        jcbAlumno.removeAllItems();
        jcbAlumno.addItem("  -- Seleccionar Item -- ");
        
        for (Alumno aux:alumno){
        
            jcbAlumno.addItem(aux.getDni()+", "+aux.getApellido()+" ,"+aux.getNombre());
        
        }  
    }
//------------------------------------------------------------------------------   
}//fin class
